{"ast":null,"code":"var _jsxFileName = \"/Users/gwang/react-project/react-complete-guide/react_project_account_book/src/components/NewExpense/ExpenseForm.js\",\n  _s = $RefreshSig$();\nimport { useRef, useState } from \"react\";\nimport \"./ExpenseForm.css\";\nimport ErrorModal from \"../UI/ErrorModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseForm = props => {\n  _s();\n  // There are two ways to update userInput ..\n  // One is to use each other's useState.\n  // The other is using objects.\n  // There is no additional benefit to using either one.\n  // Depends on preference\n  // see the syntax example below\n\n  // const [enteredTitle, setEnteredTitle] = useState(\"\");\n  // const [enteredAmount, setEnteredAmount] = useState(\"\");\n  // const [enteredDate, setEnteredDate] = useState(\"\");\n\n  const titleInputRef = useRef();\n  const amountInputRef = useRef();\n  const dateInputRef = useRef();\n  const [error, setError] = useState();\n\n  //   const [userInput, setUserInput] = useState({\n  //     enteredTitle: \"\",\n  //     enteredAmount: \"\",\n  //     enteredDate: \"\",\n  //   });\n\n  const titleChangeHandler = event => {\n    setEnteredTitle(event.target.value);\n\n    // ************************* Alternative ways to change state ************************************************ /\n    // setUserInput({                          // In this case, the values of other objects must also be specified.\n    //   ...userInput,                         // ES6 Syntax.. all Object copy.\n    //   enteredTitle: event.target.value,     // Change only the values included in the event\n    // });\n\n    // In the case above, it can be wrong if the state reference wrong version of state\n    // setUserInput((prevState) => {\n    //   return { ...prevState, enteredTitle: event.target.value }; // The prevState helps state keep always latest.\n    // });\n\n    // ex) It should always be used in places like the Counter example like below\n    // export default function App() {\n    //     const [counter, setCounter] = useState(0);\n    //     const counterHandler = () => {\n    //         setCounter(prevState => ++prevState);\n    //     };\n    //     return (\n    //       <div>\n    //         <p id=\"counter\">{counter}</p>\n    //         <button onClick={counterHandler}>Increment</button>\n    //       </div>\n    //     );\n    // }\n    // *********************** //Alternative ways to change state ************************************************ /\n  };\n\n  // const amountChangeHandler = (event) => {\n  //   setEnteredAmount(event.target.value);\n  // };\n\n  // const dateChangeHandler = (event) => {\n  //   setEnteredDate(event.target.value);\n  // };\n\n  //  There's another way to define Handler function at once.\n  //  identifier and value should be defined in DOM\n  //   const inputChangeHandler = (identifier, value) => {\n  //     if (identifier === \"title\") {\n  //       setEnteredTitle(value);\n  //     } else if (identifier === \"amount\") {\n  //       setEnteredAmount(value);\n  //     } else if (identifier === \"date\") {\n  //       setEnteredDate(value);\n  //     }\n  //   };\n\n  const submitHandler = event => {\n    event.preventDefault(); // Prevent the default functionality (Automatically reload page)\n\n    const enteredTitle = titleInputRef.current.value;\n    const enteredAmount = amountInputRef.current.value;\n    const enteredDate = dateInputRef.current.value;\n\n    // Validation Check\n    if (enteredTitle === \"\") {\n      setError({\n        title: \"Invalid input\",\n        message: \"Plesas enter a valid title (non-empty values).\"\n      });\n      return;\n    }\n    if (enteredAmount === \"\") {\n      setError({\n        title: \"Invalid input\",\n        message: \"Plesas enter a valid amout (non-empty values).\"\n      });\n      return;\n    }\n    if (enteredDate === \"\") {\n      setError({\n        title: \"Invalid input\",\n        message: \"Plesas enter a valid date (non-empty values).\"\n      });\n      return;\n    }\n    const expenseData = {\n      title: enteredTitle,\n      amount: +enteredAmount,\n      date: new Date(enteredDate)\n    };\n    props.onSaveExpenseDate(expenseData);\n\n    // setEnteredTitle(\"\"); // submitted form init.\n    // setEnteredAmount(\"\");\n    // setEnteredDate(\"\");\n\n    titleInputRef.current.value = '';\n    amountInputRef.current.value = '';\n    dateInputRef.current.value = '';\n  };\n  const errorHandler = () => {\n    setError(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(ErrorModal, {\n      title: error.title,\n      message: error.message,\n      onConfirm: errorHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\"\n            // value={enteredTitle} // 2-way binding!\n            // onChange={titleChangeHandler}\n            ,\n            ref: titleInputRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            min: \"0.01\",\n            step: \"0.01\"\n            // value={enteredAmount}\n            // onChange={amountChangeHandler}\n            ,\n            ref: amountInputRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            min: \"2019-01-01\",\n            max: \"2023-12-31\"\n            // value={enteredDate}\n            // onChange={dateChangeHandler}\n            ,\n            ref: dateInputRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: props.onCancel,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Add Expense\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpenseForm, \"mv3v4CZPIZB1OGjfusvUQLsO4F0=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["useRef","useState","ErrorModal","jsxDEV","_jsxDEV","ExpenseForm","props","_s","titleInputRef","amountInputRef","dateInputRef","error","setError","titleChangeHandler","event","setEnteredTitle","target","value","submitHandler","preventDefault","enteredTitle","current","enteredAmount","enteredDate","title","message","expenseData","amount","date","Date","onSaveExpenseDate","errorHandler","children","onConfirm","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","className","type","ref","min","step","max","onClick","onCancel","_c","$RefreshReg$"],"sources":["/Users/gwang/react-project/react-complete-guide/react_project_account_book/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import { useRef, useState } from \"react\";\nimport \"./ExpenseForm.css\";\nimport ErrorModal from \"../UI/ErrorModal\";\n\nconst ExpenseForm = (props) => {\n  // There are two ways to update userInput ..\n  // One is to use each other's useState.\n  // The other is using objects.\n  // There is no additional benefit to using either one.\n  // Depends on preference\n  // see the syntax example below\n\n  // const [enteredTitle, setEnteredTitle] = useState(\"\");\n  // const [enteredAmount, setEnteredAmount] = useState(\"\");\n  // const [enteredDate, setEnteredDate] = useState(\"\");\n\n  const titleInputRef = useRef();\n  const amountInputRef = useRef();\n  const dateInputRef = useRef();\n\n  const [error, setError] = useState();\n\n  //   const [userInput, setUserInput] = useState({\n  //     enteredTitle: \"\",\n  //     enteredAmount: \"\",\n  //     enteredDate: \"\",\n  //   });\n\n  const titleChangeHandler = (event) => {\n    setEnteredTitle(event.target.value);\n\n    // ************************* Alternative ways to change state ************************************************ /\n    // setUserInput({                          // In this case, the values of other objects must also be specified.\n    //   ...userInput,                         // ES6 Syntax.. all Object copy.\n    //   enteredTitle: event.target.value,     // Change only the values included in the event\n    // });\n\n    // In the case above, it can be wrong if the state reference wrong version of state\n    // setUserInput((prevState) => {\n    //   return { ...prevState, enteredTitle: event.target.value }; // The prevState helps state keep always latest.\n    // });\n\n    // ex) It should always be used in places like the Counter example like below\n    // export default function App() {\n    //     const [counter, setCounter] = useState(0);\n    //     const counterHandler = () => {\n    //         setCounter(prevState => ++prevState);\n    //     };\n    //     return (\n    //       <div>\n    //         <p id=\"counter\">{counter}</p>\n    //         <button onClick={counterHandler}>Increment</button>\n    //       </div>\n    //     );\n    // }\n    // *********************** //Alternative ways to change state ************************************************ /\n  };\n\n  // const amountChangeHandler = (event) => {\n  //   setEnteredAmount(event.target.value);\n  // };\n\n  // const dateChangeHandler = (event) => {\n  //   setEnteredDate(event.target.value);\n  // };\n\n  //  There's another way to define Handler function at once.\n  //  identifier and value should be defined in DOM\n  //   const inputChangeHandler = (identifier, value) => {\n  //     if (identifier === \"title\") {\n  //       setEnteredTitle(value);\n  //     } else if (identifier === \"amount\") {\n  //       setEnteredAmount(value);\n  //     } else if (identifier === \"date\") {\n  //       setEnteredDate(value);\n  //     }\n  //   };\n\n  const submitHandler = (event) => {\n    event.preventDefault(); // Prevent the default functionality (Automatically reload page)\n\n    const enteredTitle = titleInputRef.current.value;\n    const enteredAmount = amountInputRef.current.value;\n    const enteredDate = dateInputRef.current.value;\n\n    // Validation Check\n    if (enteredTitle === \"\") {\n      setError({\n        title: \"Invalid input\",\n        message: \"Plesas enter a valid title (non-empty values).\",\n      });\n      return;\n    }\n\n    if (enteredAmount === \"\") {\n      setError({\n        title: \"Invalid input\",\n        message: \"Plesas enter a valid amout (non-empty values).\",\n      });\n      return;\n    }\n\n    if (enteredDate === \"\") {\n      setError({\n        title: \"Invalid input\",\n        message: \"Plesas enter a valid date (non-empty values).\",\n      });\n      return;\n    }\n\n    const expenseData = {\n      title: enteredTitle,\n      amount: +enteredAmount,\n      date: new Date(enteredDate),\n    };\n\n    props.onSaveExpenseDate(expenseData);\n\n    // setEnteredTitle(\"\"); // submitted form init.\n    // setEnteredAmount(\"\");\n    // setEnteredDate(\"\");\n\n    titleInputRef.current.value = '';\n    amountInputRef.current.value = '';\n    dateInputRef.current.value = '';\n  };\n\n  const errorHandler = () => {\n    setError(null);\n  };\n\n  return (\n    <div>\n      {error && (\n        <ErrorModal\n          title={error.title}\n          message={error.message}\n          onConfirm={errorHandler}\n        />\n      )}\n      <form onSubmit={submitHandler}>\n        <div className=\"new-expense__controls\">\n          <div className=\"new-expense__control\">\n            <label>Title</label>\n            <input\n              type=\"text\"\n              // value={enteredTitle} // 2-way binding!\n              // onChange={titleChangeHandler}\n              ref={titleInputRef}\n            />\n            {/* <input\n          type=\"text\"\n          onChange={(event) => {\n            inputChangeHandler(\"title\", event.target.value);\n          }}\n        /> */}\n          </div>\n          <div className=\"new-expense__control\">\n            <label>Amount</label>\n            <input\n              type=\"number\"\n              min=\"0.01\"\n              step=\"0.01\"\n              // value={enteredAmount}\n              // onChange={amountChangeHandler}\n              ref={amountInputRef}\n            />\n          </div>\n          <div className=\"new-expense__control\">\n            <label>Date</label>\n            <input\n              type=\"date\"\n              min=\"2019-01-01\"\n              max=\"2023-12-31\"\n              // value={enteredDate}\n              // onChange={dateChangeHandler}\n              ref={dateInputRef}\n            />\n          </div>\n          <div className=\"new-expense__actions\">\n            <button onClick={props.onCancel}>Cancel</button>\n            <button type=\"submit\">Add Expense</button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\nexport default ExpenseForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}