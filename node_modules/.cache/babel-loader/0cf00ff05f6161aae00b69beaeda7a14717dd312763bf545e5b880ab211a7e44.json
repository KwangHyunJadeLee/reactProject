{"ast":null,"code":"var _jsxFileName = \"/Users/gwang/react-project/react-complete-guide/react_project_account_book/src/components/NewExpense/ExpenseForm.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"./ExpenseForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseForm = props => {\n  _s();\n  // There are two ways to update userInput ..\n  // One is to use each other's useState.\n  // The other is using objects.\n  // There is no additional benefit to using either one.\n  // Depends on preference\n  // see the syntax example below\n\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\");\n\n  //   const [userInput, setUserInput] = useState({\n  //     enteredTitle: \"\",\n  //     enteredAmount: \"\",\n  //     enteredDate: \"\",\n  //   });\n\n  const titleChangeHandler = event => {\n    setEnteredTitle(event.target.value);\n\n    // ************************* Alternative ways to change state ************************************************ /\n    // setUserInput({                          // In this case, the values of other objects must also be specified.\n    //   ...userInput,                         // ES6 Syntax.. all Object copy.\n    //   enteredTitle: event.target.value,     // Change only the values included in the event\n    // });\n\n    // In the case above, it can be wrong if the state reference wrong version of state\n    // setUserInput((prevState) => {\n    //   return { ...prevState, enteredTitle: event.target.value }; // The prevState helps state keep always latest.\n    // });\n\n    // ex) It should always be used in places like the Counter example like below\n    // export default function App() {\n    //     const [counter, setCounter] = useState(0);\n    //     const counterHandler = () => {\n    //         setCounter(prevState => ++prevState);\n    //     };\n    //     return (\n    //       <div>\n    //         <p id=\"counter\">{counter}</p>\n    //         <button onClick={counterHandler}>Increment</button>\n    //       </div>\n    //     );\n    // }\n    // *********************** //Alternative ways to change state ************************************************ /\n  };\n\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value);\n  };\n  const dateChangeHandler = event => {\n    setEnteredDate(event.target.value);\n  };\n\n  //  There's another way to define Handler function at once.\n  //  identifier and value should be defined in DOM\n  //   const inputChangeHandler = (identifier, value) => {\n  //     if (identifier === \"title\") {\n  //       setEnteredTitle(value);\n  //     } else if (identifier === \"amount\") {\n  //       setEnteredAmount(value);\n  //     } else if (identifier === \"date\") {\n  //       setEnteredDate(value);\n  //     }\n  //   };\n\n  const submitHandler = event => {\n    event.preventDefault(); // Prevent the default functionality (Automatically reload page)\n\n    if (expenseData.title === null) {\n      return false;\n    }\n    if (expenseData.amount === null) {\n      return false;\n    }\n    if (expenseData.data === null) {\n      return false;\n    }\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate)\n    };\n    props.onSaveExpenseDate(expenseData);\n    setEnteredTitle(\"\"); // submitted form init.\n    setEnteredAmount(\"\");\n    setEnteredDate(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: enteredTitle // 2-way binding!\n          ,\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          value: enteredAmount,\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2023-12-31\",\n          value: enteredDate,\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: props.onCancel,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add Expense\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpenseForm, \"cQceuCgozgRBnFcek1NBqBcFFts=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","ExpenseForm","props","_s","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","data","date","Date","onSaveExpenseDate","onSubmit","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","min","step","max","onClick","onCancel","_c","$RefreshReg$"],"sources":["/Users/gwang/react-project/react-complete-guide/react_project_account_book/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import { useState } from \"react\";\nimport \"./ExpenseForm.css\";\n\nconst ExpenseForm = (props) => {\n  // There are two ways to update userInput ..\n  // One is to use each other's useState.\n  // The other is using objects.\n  // There is no additional benefit to using either one.\n  // Depends on preference\n  // see the syntax example below\n\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\");\n\n  //   const [userInput, setUserInput] = useState({\n  //     enteredTitle: \"\",\n  //     enteredAmount: \"\",\n  //     enteredDate: \"\",\n  //   });\n\n  const titleChangeHandler = (event) => {\n    setEnteredTitle(event.target.value);\n\n    // ************************* Alternative ways to change state ************************************************ /\n    // setUserInput({                          // In this case, the values of other objects must also be specified.\n    //   ...userInput,                         // ES6 Syntax.. all Object copy.\n    //   enteredTitle: event.target.value,     // Change only the values included in the event\n    // });\n\n    // In the case above, it can be wrong if the state reference wrong version of state\n    // setUserInput((prevState) => {\n    //   return { ...prevState, enteredTitle: event.target.value }; // The prevState helps state keep always latest.\n    // });\n\n    // ex) It should always be used in places like the Counter example like below\n    // export default function App() {\n    //     const [counter, setCounter] = useState(0);\n    //     const counterHandler = () => {\n    //         setCounter(prevState => ++prevState);\n    //     };\n    //     return (\n    //       <div>\n    //         <p id=\"counter\">{counter}</p>\n    //         <button onClick={counterHandler}>Increment</button>\n    //       </div>\n    //     );\n    // }\n    // *********************** //Alternative ways to change state ************************************************ /\n  };\n\n  const amountChangeHandler = (event) => {\n    setEnteredAmount(event.target.value);\n  };\n\n  const dateChangeHandler = (event) => {\n    setEnteredDate(event.target.value);\n  };\n\n  //  There's another way to define Handler function at once.\n  //  identifier and value should be defined in DOM\n  //   const inputChangeHandler = (identifier, value) => {\n  //     if (identifier === \"title\") {\n  //       setEnteredTitle(value);\n  //     } else if (identifier === \"amount\") {\n  //       setEnteredAmount(value);\n  //     } else if (identifier === \"date\") {\n  //       setEnteredDate(value);\n  //     }\n  //   };\n\n  const submitHandler = (event) => {\n    event.preventDefault(); // Prevent the default functionality (Automatically reload page)\n    \n    if(expenseData.title === null){\n      return false;\n    }\n\n    if(expenseData.amount === null){\n      return false;\n    }\n\n    if(expenseData.data === null){\n      return false;\n    }\n    \n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate),\n    };\n\n    props.onSaveExpenseDate(expenseData);\n\n    setEnteredTitle(\"\"); // submitted form init.\n    setEnteredAmount(\"\");\n    setEnteredDate(\"\");\n  };\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className=\"new-expense__controls\">\n        <div className=\"new-expense__control\">\n          <label>Title</label>\n          <input\n            type=\"text\"\n            value={enteredTitle} // 2-way binding!\n            onChange={titleChangeHandler}\n          />\n          {/* <input\n          type=\"text\"\n          onChange={(event) => {\n            inputChangeHandler(\"title\", event.target.value);\n          }}\n        /> */}\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Amount</label>\n          <input\n            type=\"number\"\n            min=\"0.01\"\n            step=\"0.01\"\n            value={enteredAmount}\n            onChange={amountChangeHandler}\n          />\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Date</label>\n          <input\n            type=\"date\"\n            min=\"2019-01-01\"\n            max=\"2023-12-31\"\n            value={enteredDate}\n            onChange={dateChangeHandler}\n          />\n        </div>\n        <div className=\"new-expense__actions\">\n          <button onClick={props.onCancel}>Cancel</button>\n          <button type=\"submit\">Add Expense</button>\n        </div>\n      </div>\n    </form>\n  );\n};\nexport default ExpenseForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}