{"ast":null,"code":"var _jsxFileName = \"/Users/gwang/react-project/react-complete-guide/react_project_account_book/src/components/NewExpense/ExpenseForm.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useReducer } from \"react\";\nimport \"./ExpenseForm.css\";\nimport ErrorModal from \"../UI/ErrorModal\";\nimport Input from \"../UI/Input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseForm = props => {\n  _s();\n  // There are two ways to update userInput ..\n  // One is to use each other's useState.\n  // The other is using objects.\n  // There is no additional benefit to using either one.\n  // Depends on preference\n  // see the syntax example below\n\n  // const [enteredTitle, setEnteredTitle] = useState(\"\");\n  // const [enteredAmount, setEnteredAmount] = useState(\"\");\n  // const [enteredDate, setEnteredDate] = useState(\"\");\n\n  // Those Inputs are simply text what user puts into\n  // Which means no needed change state or something else dynamically.\n  // In that case, Using Ref can be better.\n  const titleInputRef = useRef();\n  const amountInputRef = useRef();\n  const dateInputRef = useRef();\n  const [error, setError] = useState();\n  const enteredTitle = titleInputRef.current.value;\n  const enteredAmount = amountInputRef.current.value;\n  const enteredDate = dateInputRef.current.value;\n  const [titleState, dispatchTitle] = useReducer(titleReducer, {\n    value: \"\",\n    isValid: null\n  });\n  const [amoutState, dispatchAmount] = useReducer(amountReducer, {\n    value: \"\",\n    isValid: null\n  });\n\n  //   const [userInput, setUserInput] = useState({\n  //     enteredTitle: \"\",\n  //     enteredAmount: \"\",\n  //     enteredDate: \"\",\n  //   });\n\n  // const titleChangeHandler = (event) => {\n  //   setEnteredTitle(event.target.value);\n\n  // ************************* Alternative ways to change state ************************************************ /\n  // setUserInput({                          // In this case, the values of other objects must also be specified.\n  //   ...userInput,                         // ES6 Syntax.. all Object copy.\n  //   enteredTitle: event.target.value,     // Change only the values included in the event\n  // });\n\n  // In the case above, it can be wrong if the state reference wrong version of state\n  // setUserInput((prevState) => {\n  //   return { ...prevState, enteredTitle: event.target.value }; // The prevState helps state keep always latest.\n  // });\n\n  // ex) It should always be used in places like the Counter example like below\n  // export default function App() {\n  //     const [counter, setCounter] = useState(0);\n  //     const counterHandler = () => {\n  //         setCounter(prevState => ++prevState);\n  //     };\n  //     return (\n  //       <div>\n  //         <p id=\"counter\">{counter}</p>\n  //         <button onClick={counterHandler}>Increment</button>\n  //       </div>\n  //     );\n  // }\n  // *********************** //Alternative ways to change state ************************************************ /\n  //};\n\n  // const amountChangeHandler = (event) => {\n  //   setEnteredAmount(event.target.value);\n  // };\n\n  // const dateChangeHandler = (event) => {\n  //   setEnteredDate(event.target.value);\n  // };\n\n  //  There's another way to define Handler function at once.\n  //  identifier and value should be defined in DOM\n  //   const inputChangeHandler = (identifier, value) => {\n  //     if (identifier === \"title\") {\n  //       setEnteredTitle(value);\n  //     } else if (identifier === \"amount\") {\n  //       setEnteredAmount(value);\n  //     } else if (identifier === \"date\") {\n  //       setEnteredDate(value);\n  //     }\n  //   };\n\n  const submitHandler = event => {\n    event.preventDefault(); // Prevent the default functionality (Automatically reload page)\n\n    // Validation Check\n    if (enteredTitle === \"\") {\n      setError({\n        title: \"Invalid input\",\n        message: \"Plesas enter a valid title (non-empty values).\"\n      });\n      return;\n    }\n    if (enteredAmount === \"\") {\n      setError({\n        title: \"Invalid input\",\n        message: \"Plesas enter a valid amout (non-empty values).\"\n      });\n      return;\n    }\n    if (enteredDate === \"\") {\n      setError({\n        title: \"Invalid input\",\n        message: \"Plesas enter a valid date (non-empty values).\"\n      });\n      return;\n    }\n    const expenseData = {\n      title: enteredTitle,\n      amount: +enteredAmount,\n      date: new Date(enteredDate)\n    };\n    props.onSaveExpenseDate(expenseData);\n\n    // setEnteredTitle(\"\"); // submitted form init.\n    // setEnteredAmount(\"\");\n    // setEnteredDate(\"\");\n\n    titleInputRef.current.value = \"\";\n    amountInputRef.current.value = \"\";\n    dateInputRef.current.value = \"\";\n  };\n  const errorHandler = () => {\n    setError(null);\n  };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [error && /*#__PURE__*/_jsxDEV(ErrorModal, {\n      title: error.title,\n      message: error.message,\n      onConfirm: errorHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__controls\",\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          label: \"Title\",\n          type: \"text\",\n          ref: titleInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          label: \"Amount\",\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          ref: amountInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          label: \"Date\",\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2023-12-31\",\n          ref: dateInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: props.onCancel,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Add Expense\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpenseForm, \"etyY04HVEAlGDwNKulDNhHF1DtY=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useRef","useState","useReducer","ErrorModal","Input","jsxDEV","_jsxDEV","ExpenseForm","props","_s","titleInputRef","amountInputRef","dateInputRef","error","setError","enteredTitle","current","value","enteredAmount","enteredDate","titleState","dispatchTitle","titleReducer","isValid","amoutState","dispatchAmount","amountReducer","submitHandler","event","preventDefault","title","message","expenseData","amount","date","Date","onSaveExpenseDate","errorHandler","Fragment","children","onConfirm","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","className","label","type","ref","min","step","max","onClick","onCancel","_c","$RefreshReg$"],"sources":["/Users/gwang/react-project/react-complete-guide/react_project_account_book/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import React, { useRef, useState, useReducer } from \"react\";\nimport \"./ExpenseForm.css\";\nimport ErrorModal from \"../UI/ErrorModal\";\nimport Input from \"../UI/Input\";\n\nconst ExpenseForm = (props) => {\n  // There are two ways to update userInput ..\n  // One is to use each other's useState.\n  // The other is using objects.\n  // There is no additional benefit to using either one.\n  // Depends on preference\n  // see the syntax example below\n\n  // const [enteredTitle, setEnteredTitle] = useState(\"\");\n  // const [enteredAmount, setEnteredAmount] = useState(\"\");\n  // const [enteredDate, setEnteredDate] = useState(\"\");\n\n  // Those Inputs are simply text what user puts into\n  // Which means no needed change state or something else dynamically.\n  // In that case, Using Ref can be better.\n  const titleInputRef = useRef();\n  const amountInputRef = useRef();\n  const dateInputRef = useRef();\n\n  const [error, setError] = useState();\n\n  const enteredTitle = titleInputRef.current.value;\n  const enteredAmount = amountInputRef.current.value;\n  const enteredDate = dateInputRef.current.value;\n\n  const [titleState, dispatchTitle] = useReducer(titleReducer, {\n    value: \"\",\n    isValid: null,\n  });\n\n  const [amoutState, dispatchAmount] = useReducer(amountReducer, {\n    value: \"\",\n    isValid: null,\n  });\n\n  //   const [userInput, setUserInput] = useState({\n  //     enteredTitle: \"\",\n  //     enteredAmount: \"\",\n  //     enteredDate: \"\",\n  //   });\n\n  // const titleChangeHandler = (event) => {\n  //   setEnteredTitle(event.target.value);\n\n  // ************************* Alternative ways to change state ************************************************ /\n  // setUserInput({                          // In this case, the values of other objects must also be specified.\n  //   ...userInput,                         // ES6 Syntax.. all Object copy.\n  //   enteredTitle: event.target.value,     // Change only the values included in the event\n  // });\n\n  // In the case above, it can be wrong if the state reference wrong version of state\n  // setUserInput((prevState) => {\n  //   return { ...prevState, enteredTitle: event.target.value }; // The prevState helps state keep always latest.\n  // });\n\n  // ex) It should always be used in places like the Counter example like below\n  // export default function App() {\n  //     const [counter, setCounter] = useState(0);\n  //     const counterHandler = () => {\n  //         setCounter(prevState => ++prevState);\n  //     };\n  //     return (\n  //       <div>\n  //         <p id=\"counter\">{counter}</p>\n  //         <button onClick={counterHandler}>Increment</button>\n  //       </div>\n  //     );\n  // }\n  // *********************** //Alternative ways to change state ************************************************ /\n  //};\n\n  // const amountChangeHandler = (event) => {\n  //   setEnteredAmount(event.target.value);\n  // };\n\n  // const dateChangeHandler = (event) => {\n  //   setEnteredDate(event.target.value);\n  // };\n\n  //  There's another way to define Handler function at once.\n  //  identifier and value should be defined in DOM\n  //   const inputChangeHandler = (identifier, value) => {\n  //     if (identifier === \"title\") {\n  //       setEnteredTitle(value);\n  //     } else if (identifier === \"amount\") {\n  //       setEnteredAmount(value);\n  //     } else if (identifier === \"date\") {\n  //       setEnteredDate(value);\n  //     }\n  //   };\n\n  const submitHandler = (event) => {\n    event.preventDefault(); // Prevent the default functionality (Automatically reload page)\n\n    // Validation Check\n    if (enteredTitle === \"\") {\n      setError({\n        title: \"Invalid input\",\n        message: \"Plesas enter a valid title (non-empty values).\",\n      });\n      return;\n    }\n\n    if (enteredAmount === \"\") {\n      setError({\n        title: \"Invalid input\",\n        message: \"Plesas enter a valid amout (non-empty values).\",\n      });\n      return;\n    }\n\n    if (enteredDate === \"\") {\n      setError({\n        title: \"Invalid input\",\n        message: \"Plesas enter a valid date (non-empty values).\",\n      });\n      return;\n    }\n\n    const expenseData = {\n      title: enteredTitle,\n      amount: +enteredAmount,\n      date: new Date(enteredDate),\n    };\n\n    props.onSaveExpenseDate(expenseData);\n\n    // setEnteredTitle(\"\"); // submitted form init.\n    // setEnteredAmount(\"\");\n    // setEnteredDate(\"\");\n\n    titleInputRef.current.value = \"\";\n    amountInputRef.current.value = \"\";\n    dateInputRef.current.value = \"\";\n  };\n\n  const errorHandler = () => {\n    setError(null);\n  };\n\n  return (\n    <React.Fragment>\n      {error && (\n        <ErrorModal\n          title={error.title}\n          message={error.message}\n          onConfirm={errorHandler}\n        />\n      )}\n      <form onSubmit={submitHandler}>\n        <div className=\"new-expense__controls\">\n          <Input label=\"Title\" type=\"text\" ref={titleInputRef} />\n          <Input\n            label=\"Amount\"\n            type=\"number\"\n            min=\"0.01\"\n            step=\"0.01\"\n            ref={amountInputRef}\n          />\n          <Input\n            label=\"Date\"\n            type=\"date\"\n            min=\"2019-01-01\"\n            max=\"2023-12-31\"\n            ref={dateInputRef}\n          />\n          <div className=\"new-expense__actions\">\n            <button onClick={props.onCancel}>Cancel</button>\n            <button type=\"submit\">Add Expense</button>\n          </div>\n        </div>\n      </form>\n    </React.Fragment>\n  );\n};\nexport default ExpenseForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}