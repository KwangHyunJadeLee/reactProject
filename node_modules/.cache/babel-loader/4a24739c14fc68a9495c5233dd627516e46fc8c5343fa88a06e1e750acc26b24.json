{"ast":null,"code":"var _jsxFileName = \"/Users/gwang/react-project/react-complete-guide/react_project_account_book/src/components/NewExpense/ExpenseForm.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"./ExpenseForm.css\";\nimport ErrorModal from \"../UI/ErrorModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseForm = props => {\n  _s();\n  // There are two ways to update userInput ..\n  // One is to use each other's useState.\n  // The other is using objects.\n  // There is no additional benefit to using either one.\n  // Depends on preference\n  // see the syntax example below\n\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\");\n  const [error, setError] = useState();\n\n  //   const [userInput, setUserInput] = useState({\n  //     enteredTitle: \"\",\n  //     enteredAmount: \"\",\n  //     enteredDate: \"\",\n  //   });\n\n  const titleChangeHandler = event => {\n    setEnteredTitle(event.target.value);\n\n    // ************************* Alternative ways to change state ************************************************ /\n    // setUserInput({                          // In this case, the values of other objects must also be specified.\n    //   ...userInput,                         // ES6 Syntax.. all Object copy.\n    //   enteredTitle: event.target.value,     // Change only the values included in the event\n    // });\n\n    // In the case above, it can be wrong if the state reference wrong version of state\n    // setUserInput((prevState) => {\n    //   return { ...prevState, enteredTitle: event.target.value }; // The prevState helps state keep always latest.\n    // });\n\n    // ex) It should always be used in places like the Counter example like below\n    // export default function App() {\n    //     const [counter, setCounter] = useState(0);\n    //     const counterHandler = () => {\n    //         setCounter(prevState => ++prevState);\n    //     };\n    //     return (\n    //       <div>\n    //         <p id=\"counter\">{counter}</p>\n    //         <button onClick={counterHandler}>Increment</button>\n    //       </div>\n    //     );\n    // }\n    // *********************** //Alternative ways to change state ************************************************ /\n  };\n\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value);\n  };\n  const dateChangeHandler = event => {\n    setEnteredDate(event.target.value);\n  };\n\n  //  There's another way to define Handler function at once.\n  //  identifier and value should be defined in DOM\n  //   const inputChangeHandler = (identifier, value) => {\n  //     if (identifier === \"title\") {\n  //       setEnteredTitle(value);\n  //     } else if (identifier === \"amount\") {\n  //       setEnteredAmount(value);\n  //     } else if (identifier === \"date\") {\n  //       setEnteredDate(value);\n  //     }\n  //   };\n\n  const submitHandler = event => {\n    event.preventDefault(); // Prevent the default functionality (Automatically reload page)\n\n    if (enteredTitle === \"\") {\n      setError({\n        title: \"Invalid input\",\n        message: \"Plesas enter a valid title (non-empty values).\"\n      });\n      return;\n    }\n    if (enteredAmount === \"\") {\n      setError({\n        title: \"Invalid input\",\n        message: \"Plesas enter a valid amout (non-empty values).\"\n      });\n      return false;\n    }\n    if (enteredDate === \"\") {\n      setError({\n        title: \"Invalid input\",\n        message: \"Plesas enter a valid date (non-empty values).\"\n      });\n      return false;\n    }\n    const expenseData = {\n      title: enteredTitle,\n      amount: +enteredAmount,\n      date: new Date(enteredDate)\n    };\n    props.onSaveExpenseDate(expenseData);\n    setEnteredTitle(\"\"); // submitted form init.\n    setEnteredAmount(\"\");\n    setEnteredDate(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ErrorModal, {\n      title: \"ddd\",\n      message: \"aaa\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: enteredTitle // 2-way binding!\n            ,\n            onChange: titleChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            min: \"0.01\",\n            step: \"0.01\",\n            value: enteredAmount,\n            onChange: amountChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            min: \"2019-01-01\",\n            max: \"2023-12-31\",\n            value: enteredDate,\n            onChange: dateChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: props.onCancel,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Add Expense\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpenseForm, \"THPbld5OEJ0XvCD0s90rFeI5NlU=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["useState","ErrorModal","jsxDEV","_jsxDEV","ExpenseForm","props","_s","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","error","setError","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","submitHandler","preventDefault","title","message","expenseData","amount","date","Date","onSaveExpenseDate","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","className","type","onChange","min","step","max","onClick","onCancel","_c","$RefreshReg$"],"sources":["/Users/gwang/react-project/react-complete-guide/react_project_account_book/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import { useState } from \"react\";\nimport \"./ExpenseForm.css\";\nimport ErrorModal from \"../UI/ErrorModal\";\n\nconst ExpenseForm = (props) => {\n  // There are two ways to update userInput ..\n  // One is to use each other's useState.\n  // The other is using objects.\n  // There is no additional benefit to using either one.\n  // Depends on preference\n  // see the syntax example below\n\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\");\n  const [error, setError] = useState();\n\n  //   const [userInput, setUserInput] = useState({\n  //     enteredTitle: \"\",\n  //     enteredAmount: \"\",\n  //     enteredDate: \"\",\n  //   });\n\n  const titleChangeHandler = (event) => {\n    setEnteredTitle(event.target.value);\n\n    // ************************* Alternative ways to change state ************************************************ /\n    // setUserInput({                          // In this case, the values of other objects must also be specified.\n    //   ...userInput,                         // ES6 Syntax.. all Object copy.\n    //   enteredTitle: event.target.value,     // Change only the values included in the event\n    // });\n\n    // In the case above, it can be wrong if the state reference wrong version of state\n    // setUserInput((prevState) => {\n    //   return { ...prevState, enteredTitle: event.target.value }; // The prevState helps state keep always latest.\n    // });\n\n    // ex) It should always be used in places like the Counter example like below\n    // export default function App() {\n    //     const [counter, setCounter] = useState(0);\n    //     const counterHandler = () => {\n    //         setCounter(prevState => ++prevState);\n    //     };\n    //     return (\n    //       <div>\n    //         <p id=\"counter\">{counter}</p>\n    //         <button onClick={counterHandler}>Increment</button>\n    //       </div>\n    //     );\n    // }\n    // *********************** //Alternative ways to change state ************************************************ /\n  };\n\n  const amountChangeHandler = (event) => {\n    setEnteredAmount(event.target.value);\n  };\n\n  const dateChangeHandler = (event) => {\n    setEnteredDate(event.target.value);\n  };\n\n  //  There's another way to define Handler function at once.\n  //  identifier and value should be defined in DOM\n  //   const inputChangeHandler = (identifier, value) => {\n  //     if (identifier === \"title\") {\n  //       setEnteredTitle(value);\n  //     } else if (identifier === \"amount\") {\n  //       setEnteredAmount(value);\n  //     } else if (identifier === \"date\") {\n  //       setEnteredDate(value);\n  //     }\n  //   };\n\n  const submitHandler = (event) => {\n    event.preventDefault(); // Prevent the default functionality (Automatically reload page)\n\n    if (enteredTitle === \"\") {\n      setError({\n        title: \"Invalid input\",\n        message: \"Plesas enter a valid title (non-empty values).\",\n      });\n      return;\n    }\n\n    if (enteredAmount === \"\") {\n      setError({\n        title: \"Invalid input\",\n        message: \"Plesas enter a valid amout (non-empty values).\",\n      });\n      return false;\n    }\n\n    if (enteredDate === \"\") {\n      setError({\n        title: \"Invalid input\",\n        message: \"Plesas enter a valid date (non-empty values).\",\n      });\n      return false;\n    }\n\n    const expenseData = {\n      title: enteredTitle,\n      amount: +enteredAmount,\n      date: new Date(enteredDate),\n    };\n\n    props.onSaveExpenseDate(expenseData);\n\n    setEnteredTitle(\"\"); // submitted form init.\n    setEnteredAmount(\"\");\n    setEnteredDate(\"\");\n  };\n\n  return (\n    <div>\n      <ErrorModal title=\"ddd\" message=\"aaa\"/>\n      <form onSubmit={submitHandler}>\n        <div className=\"new-expense__controls\">\n          <div className=\"new-expense__control\">\n            <label>Title</label>\n            <input\n              type=\"text\"\n              value={enteredTitle} // 2-way binding!\n              onChange={titleChangeHandler}\n            />\n            {/* <input\n          type=\"text\"\n          onChange={(event) => {\n            inputChangeHandler(\"title\", event.target.value);\n          }}\n        /> */}\n          </div>\n          <div className=\"new-expense__control\">\n            <label>Amount</label>\n            <input\n              type=\"number\"\n              min=\"0.01\"\n              step=\"0.01\"\n              value={enteredAmount}\n              onChange={amountChangeHandler}\n            />\n          </div>\n          <div className=\"new-expense__control\">\n            <label>Date</label>\n            <input\n              type=\"date\"\n              min=\"2019-01-01\"\n              max=\"2023-12-31\"\n              value={enteredDate}\n              onChange={dateChangeHandler}\n            />\n          </div>\n          <div className=\"new-expense__actions\">\n            <button onClick={props.onCancel}>Cancel</button>\n            <button type=\"submit\">Add Expense</button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\nexport default ExpenseForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}